user  root;
worker_processes auto;

error_log /data/logs/lbf/error.log error;
worker_rlimit_core   2G;
worker_rlimit_nofile 65535;
pid logs/lbf.pid;

events {
    accept_mutex  off;
    worker_connections  8192;
}

http {

    log_format main '$http_x_session_id|$upstream_http_x_channel_id|$msec|$request_method|$upstream_http_x_request_uri|'
                    '$status|$response_time|$response_header_length|$segment_bytes_sent|$upstream_http_via|'
                    '$remote_port|$remote_addr|$label|$node|$http_referer|'
                    '$upstream_response_time|$request_length|$http_user_agent|$account_id|1|'
                    '$scheme|$segment_duration|$remote_user|$server_addr|$server_port|'
                    '$msec_first|$bytes_sent|$segment_type|$upstream_addr|$host|'
                    '$http_range|$server_protocol|$body_bytes_sent|$request_time|$upstream_http_x_info_fetcher|'
                    '$upstream_http_x_info_objSize|$upstream_http_x_info_request_id|$upstream_http_x_info_md5|$upstream_connect_time';

    include ../../env/lbf_accesslog.conf;

    sendfile       on;
    tcp_nopush     off;
    tcp_nodelay    on;
    keepalive_requests 50000;
    keepalive_timeout 100;
    client_body_buffer_size 512k;
    proxy_connect_timeout 5;
    proxy_read_timeout 65;
    proxy_send_timeout 5;
    proxy_buffer_size 8k;
    proxy_buffering off;
    lingering_close off;

    lua_package_path '${prefix}/conf/?.lua;${prefix}/../../lualib/?.lua;/opt/ant/lualib/?.lua;;';
    lua_package_cpath '/opt/ant/lualib/?.so;;';
    lua_shared_dict healthcheck 10m;

    init_by_lua_block {
        local frame = require "ant.frame"
        frame.initFrame()

        local certloader = require "certloader"
        certloader.load()
    }

    init_worker_by_lua_block {
        local frame = require "ant.frame"
        frame.initWorker()
    }

    include ../../env/lbf_upstreams.conf;

    server {

        include ../../env/lbf.listen;
        set $ant_upstream comm_backend;

        #ssl_certificate_by_lua_file conf/certificate.lua;

        location / {
            access_by_lua_file conf/access.lua;

            proxy_buffering on;
            proxy_max_temp_file_size 0;

            proxy_http_version 1.1;
            proxy_cache off;
            proxy_redirect off ;
            proxy_set_header Connection Keep-Alive;
		    proxy_set_header Host $host;
            proxy_set_header X-Remote-Addr $remote_addr;
            proxy_set_header X-Server-Addr $server_addr;
            proxy_next_upstream off;
            proxy_pass http://$ant_upstream;

            header_filter_by_lua_file conf/header_filter.lua;

            body_filter_by_lua_block {
                if ngx.status >= 400 then
                    ngx.arg[1] = "Http Error status " .. ngx.status
                    ngx.arg[2] = true
                    return
                end

                local admin = require "ant.admin"
                return admin.handle("admindict")
            }
        }
    }

    include admin.conf;
}
