upstream {{ channel_id }}_backend {
    {% for server in original -%}
    server {{ server.host }} weight={{ server.weight }} max_fails=2 fail_timeout=30s {% if server.priority == 2 %} backup {% endif %} ;
    {% endfor %}
    keepalive 100;
}

server {
    include ../../env/pg.listen;
    {% for domain in domains -%}
    server_name {{ domain.domain }};
    {% endfor %}

    ## set upstream
    set $ant_upstream {{ channel_id }}_backend;

    {% for location in locations -%}
    location {{ location.location }} {

        {% if location.expire|length > 0 -%}
        set $ant_status_expire "{% for expire in location.expire %}status={{ expire.statuscode }} expire={{ expire.expiretime }}{%if not loop.last %}, {% endif %}{% endfor %}";
        {%endif%}

        {% if location.pg_access_lua and location.pg_access_lua != '' -%}
        access_by_lua_file lua/{{ location.pg_access_lua }};
        {% else %}
        access_by_lua_file ../comm/access.lua;
        {% endif %}

        include ../../comm/header_clear.conf;

        {% if original_host and original_host != '' -%}
        proxy_set_header Host {{ original_host }};
        {% else %}
        proxy_set_header Host $host;
        {% endif %}

        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;

        {% if location.origin_header_lua and location.origin_header_lua != '' -%}
        header_filter_by_lua_file lua/{{ location.origin_header_lua }};
        {% else %}
        header_filter_by_lua_block {
            local request = require "ant.request"
            request.statusExpire()
        }
        {% endif %}
 
        proxy_pass http://$ant_upstream;

        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;

        error_page 302 = @redirect;
    }
    {% endfor %}

    location @redirect {
        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;

        set $foo $upstream_http_location;
        proxy_pass $foo;

        header_filter_by_lua_block {
            local request = require "ant.request"
            request.statusExpire()
        }

        error_page 302 = @redirect;
    }
}
