upstream pptv-shatacloud.cdn.live.pptv.com_backend {
    server shatacloud.cdn.live2.pplive.cn weight=1 max_fails=2 fail_timeout=30s  ;
    server shatacloud.cdn2.live2.pplive.cn weight=1 max_fails=2 fail_timeout=30s  backup  ;
    server 10.3.4.27:9300 weight=1 max_fails=2 fail_timeout=30s  backup  ;
    server 10.2.16.36:9300 weight=1 max_fails=2 fail_timeout=30s  backup  ;
    
    keepalive 100;
}

server {
    include ../../env/pg.listen;
    server_name shatacloud.cdn.live.pptv.com;
    

    ## set upstream
    set $ant_upstream pptv-shatacloud.cdn.live.pptv.com_backend;

    location ~*(\.ts)$ {

        set $ant_status_expire "status=404 expire=1s, status=200 expire=3d, status=206 expire=3d";
        

        
        access_by_lua_file ../comm/access.lua;
        

        include ../../comm/header_clear.conf;

        
        proxy_set_header Host $host;
        

        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;

        
        header_filter_by_lua_block {
            local request = require "ant.request"
            request.statusExpire()
        }
        
 
        proxy_pass http://$ant_upstream;

        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;

        error_page 302 = @redirect;
    }
    location ~*(\.m3u8)$ {

        set $ant_status_expire "status=404 expire=0, status=200 expire=3s";
        

        access_by_lua_file lua/pptv_pg_access.lua;
        

        include ../../comm/header_clear.conf;

        
        proxy_set_header Host $host;
        

        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;

        
        header_filter_by_lua_block {
            ngx.header["Cache-Control"] = nil
            local request = require "ant.request"
            request.statusExpire()
        }
        
 
        proxy_pass http://$ant_upstream;

        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;

        error_page 302 = @redirect;
    }
    location ~*(\.block)$ {

        set $ant_status_expire "status=404 expire=1s, status=200 expire=3d";
        

        
        access_by_lua_file ../comm/access.lua;
        

        include ../../comm/header_clear.conf;

        
        proxy_set_header Host $host;
        

        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;

        
        header_filter_by_lua_block {
            local request = require "ant.request"
            request.statusExpire()
        }
        
 
        proxy_pass http://$ant_upstream;

        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;

        error_page 302 = @redirect;
    }
    location / {

        set $ant_status_expire "status=200 expire=3d, status=206 expire=3d";
        

        
        access_by_lua_file ../comm/access.lua;
        

        include ../../comm/header_clear.conf;

        
        proxy_set_header Host $host;
        

        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;
        proxy_set_header X-Forwarded-For $http_x_forwarded_for;

        
        header_filter_by_lua_block {
            local request = require "ant.request"
            request.statusExpire()
        }
        
 
        proxy_pass http://$ant_upstream;

        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;

        error_page 302 = @redirect;
    }
    

    location @redirect {
        proxy_http_version 1.1;
        proxy_cache off;
        proxy_redirect off ;
        proxy_set_header Connection Keep-Alive;

        set $foo $upstream_http_location;
        proxy_pass $foo;

        header_filter_by_lua_block {
            local request = require "ant.request"
            request.statusExpire()
        }

        error_page 302 = @redirect;
    }
}
