lua_shared_dict portstatus 1m;

server {
    include ../../env/uce.listen;
    server_name admin.shatacdn.com;
    access_log off;

    location / {
        return 403;
    }

    location = /check {
        content_by_lua_block {
            local dict = ngx.shared.portstatus
            local status = dict:get(ngx.var.server_port)

            if status and status == "down" then
                ngx.exit(503)
            else
                ngx.exit(200)
            end
        }
    }

    location = /status {
        default_type text/plain;
        content_by_lua_block {
            local hc = require "ant.healthcheck"
            ngx.say("Worker PID: ", ngx.worker.pid())
            ngx.print(hc.status_page())
        }
    }
}

server {
    listen 127.0.0.12:9100;
    server_name admin.shatacdn.com;

    access_log /data/logs/uce/admin.log;

    allow 127.0.0.1;
    deny all;

    location / {
        return 403;
    }

    location = /port {
        access_by_lua_block {
            if ngx.req.get_method() ~= "SET" then
                ngx.exit(405)
            end

            if not ngx.var.arg_port or ngx.var.arg_port == "" then
                ngx.exit(400)
            end
            if ngx.var.arg_status ~= "down" and ngx.var.arg_status ~= "up" then
                ngx.exit(400)
            end

            local frame = require "ant.frame"
            local judge = false
            for _ , v in ipairs(frame.listen.uce) do
                judge = string.match(v, ":" .. ngx.var.arg_port .. "$")            
                if judge then
                    break
                end
            end
            if not judge then
                ngx.exit(400)
            end 

            local dict = ngx.shared.portstatus
            local ok = dict:set(ngx.var.arg_port, ngx.var.arg_status)
            if not ok then
                ngx.exit(500)
            else
                ngx.log(ngx.INFO, "set port: " .. ngx.var.arg_port .. " status: " .. ngx.var.arg_status)
                ngx.exit(200) 
            end
        }
    } 
}

